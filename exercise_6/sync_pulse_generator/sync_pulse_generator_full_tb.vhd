library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;
use STD.TEXTIO.all;
use IEEE.STD_LOGIC_TEXTIO.all;

--Simulated time needed : 12000 ns
--
--The testbench compares the output signals generated by the UUT with the 
--correct ones read from a file. The signal 'difference' indicates a difference 
--between the actual outputs of the UUT and the correct output values.

entity sync_pulse_generator_full_tb is
end sync_pulse_generator_full_tb;



architecture beh of sync_pulse_generator_full_tb is

--Component Declaration for the Unit Under Test (UUT)
  component sync_pulse_generator
    generic (G_H_PIXEL_NUMBER : integer   := 800;
             G_H_RESOLUTION   : integer   := 640;
             G_H_FRONT_PORCH  : integer   := 8;
             G_H_BACK_PORCH   : integer   := 48;
             G_H_SYNC_LENGTH  : integer   := 96;
             G_H_SYNC_ACTIVE  : std_logic := '0';

             G_V_PIXEL_NUMBER : integer   := 525;
             G_V_RESOLUTION   : integer   := 480;
             G_V_FRONT_PORCH  : integer   := 2;
             G_V_BACK_PORCH   : integer   := 33;
             G_V_SYNC_LENGTH  : integer   := 2;
             G_V_SYNC_ACTIVE  : std_logic := '0');

    port (clk   : in std_logic := '0';
          reset : in std_logic := '0';

          o_h_sync           : out std_logic := G_H_SYNC_ACTIVE;
          o_v_sync           : out std_logic := G_V_SYNC_ACTIVE;
          o_in_active_region : out std_logic := '0');
  end component;


--Signals to connect the Unit Under Test (UUT)
  signal clk                : std_logic := '0';
  signal reset              : std_logic := '0';
  signal o_h_sync           : std_logic := '1';
  signal o_v_sync           : std_logic := '1';
  signal o_in_active_region : std_logic := '0';

--Signals used for simulation
  signal stop_simulation            : std_logic := '0';
  signal difference                 : std_logic := 'U';
  signal o_h_sync_correct           : std_logic := '1';
  signal o_v_sync_correct           : std_logic := '1';
  signal o_in_active_region_correct : std_logic := '0';



begin
  --Instantiate the Unit Under Test (UUT)
  uut_sync_pulse_generator : sync_pulse_generator
    --The original timing data is replaced with values better suited for a 
    --simulation.


    port map (clk                => clk,
              reset              => reset,
              o_h_sync           => o_h_sync,
              o_v_sync           => o_v_sync,
              o_in_active_region => o_in_active_region);


  --Clock
  process
  begin
    clk <= '1';
    wait for 20 ns;
    clk <= '0';
    wait for 20 ns;


    --Stop the simulation
    if (stop_simulation = '1') then
      wait;
    end if;
  end process;


  --Sets signal to start reading data from vector file on first falling 
  --edge of o_h_sync. This is done to define a starting point of the 
  --comparison of the UUT and the data from the file. Different implementations 
  --of the reset may lead to different results during the first row. This would 
  --mess up the difference signal. But from the starting point onwards the 
  --results from the UUT and the file should be identical.


  --Reset the UUT at start  
  reset <= '1', '0' after 41 ns;

  --Read testvector from file
  process(clk, reset)
    
    file vector_file            : text is in "sync_pulse_generator_full.vec";
    variable read_line          : line;
    variable var_stimuli_vector : std_logic_vector(2 downto 0) := "110";

    
  begin
    
    if (clk'event and clk = '1') then

      if reset = '0' then
        
        if (not(endfile(vector_file))) then
          readline(vector_file, read_line);
          read(read_line, var_stimuli_vector);

          -- assign variable to signal to display signal in waveform
          o_h_sync_correct           <= var_stimuli_vector(2);
          o_v_sync_correct           <= var_stimuli_vector(1);
          o_in_active_region_correct <= var_stimuli_vector(0);

        else
          --Set signal to stop the simulation        
          stop_simulation <= '1';
        end if;

        -- calculate difference with signal to be synchronous with displayed vector (remember the difference between
        -- variables and signals)


        if ((o_h_sync_correct = o_h_sync) and (o_v_sync_correct = o_v_sync) and (o_in_active_region_correct = o_in_active_region)) then
          difference <= '0';
        else
          difference <= '1';
        end if;

      end if;

    end if;
    
  end process;

end beh;
